name: lens
version: 3.9.1
id: lens-3.9.1-b32269dc6901507ed4e00a0f16e5d30d
license: BSD3
copyright: Copyright (C) 2012-2013 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the @README@: <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals>
             .
             A video on how to use lenses and how they are constructed is available from youtube: <http://youtu.be/cefnmjtAolY?hd=1>
             .
             Slides can be obtained here: <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf>
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the lens wiki: <https://github.com/ekmett/lens/wiki>
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the example folder: <https://github.com/ekmett/lens/blob/master/examples/>
             .
             /Lenses, Folds and Traversals/
             .
             The core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/4fHw3Fd.png>>
             .
             Local copy (<Hierarchy.png>)
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- baz :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses
author: Edward A. Kmett
exposed: True
exposed-modules: Control.Exception.Lens Control.Lens
                 Control.Lens.Action Control.Lens.At Control.Lens.Combinators
                 Control.Lens.Cons Control.Lens.Each Control.Lens.Equality
                 Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
                 Control.Lens.Internal Control.Lens.Internal.Action
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Context Control.Lens.Internal.Deque
                 Control.Lens.Internal.Exception Control.Lens.Internal.Fold
                 Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
                 Control.Lens.Internal.Instances Control.Lens.Internal.Iso
                 Control.Lens.Internal.Level Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Review
                 Control.Lens.Internal.Setter Control.Lens.Internal.Zipper
                 Control.Lens.Internal.Zoom Control.Lens.Iso Control.Lens.Lens
                 Control.Lens.Level Control.Lens.Loupe Control.Lens.Operators
                 Control.Lens.Plated Control.Lens.Prism Control.Lens.Reified
                 Control.Lens.Review Control.Lens.Setter Control.Lens.Simple
                 Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
                 Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zipper
                 Control.Lens.Zoom Control.Monad.Error.Lens
                 Control.Parallel.Strategies.Lens Control.Seq.Lens Data.Array.Lens
                 Data.Bits.Lens Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.List.Split.Lens Data.Sequence.Lens Data.Set.Lens
                 Data.Text.Lens Data.Text.Strict.Lens Data.Text.Lazy.Lens
                 Data.Tree.Lens Data.Typeable.Lens Data.Vector.Lens
                 Data.Vector.Generic.Lens Generics.Deriving.Lens GHC.Generics.Lens
                 System.Exit.Lens System.FilePath.Lens System.IO.Error.Lens
                 Language.Haskell.TH.Lens Numeric.Lens
hidden-modules:
trusted: False
import-dirs: /home/kcarter/scrap/haskell/snap-test/cabal-dev//lib/lens-3.9.1/ghc-7.6.3
library-dirs: /home/kcarter/scrap/haskell/snap-test/cabal-dev//lib/lens-3.9.1/ghc-7.6.3
hs-libraries: HSlens-3.9.1
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: MonadCatchIO-transformers-0.3.0.0-00f5ba39422294066c7f13d4ef6c89a7
         array-0.4.0.1-3b78425c10ff2dad7acf7e8c8ae014c3
         base-4.6.0.1-8aa5d403c45ea59dcd2c39f123e27d57
         bifunctors-3.2.0.1-4141b1965992a1a05a4bed128d33e93d
         bytestring-0.10.0.2-4f93248f75667c2c3321a7a6761b576f
         comonad-3.1-21901c79b4771ba693150ae84f2843bf
         comonad-transformers-3.1-cfca8a2dcbe2e5bca029410b7a2cafde
         comonads-fd-3.0.3-13f7fc5e755c6294e41bf0bb162bb32f
         containers-0.5.0.0-ab1dae9a94cd3cc84e7b2805636ebfa2
         contravariant-0.4.4-0f529cf89c5b4106ca6f0ff9d44b661d
         distributive-0.3.1-9cd9a1cf5f4409181a607243a8c42721
         filepath-1.3.0.1-b12cbe18566fe1532a1fda4c85e31cbe
         generic-deriving-1.6.1-beda7127d7cba9aa6565b8eea2968249
         ghc-prim-0.3.0.0-d5221a8c8a269b66ab9a07bdc23317dd
         hashable-1.2.0.10-ba427270cad8543765ebf6f6cfa14eb5
         mtl-2.1.2-94c72af955e94b8d7b2f359dadd0cb62
         parallel-3.2.0.3-d6c020cb3aa15c71f5f29c0db359fd39
         profunctor-extras-3.3.3.1-b8d7ae9f6cd1c3e5dc93b40b6b213017
         profunctors-3.3.0.1-233af74f0b0cc256638e6370daa42e30
         reflection-1.3.2-e49b04947fef743097ed55112aa2dfc7
         semigroupoids-3.1-6d925774c6cc2b8f8301e5af7d4d8195
         semigroups-0.9.2-0ae338a1c46795582eacad9d4e2dee57
         split-0.2.2-9ce33138f4fcfb9c37f6e6c300bcc367
         tagged-0.7-1153df7a5fcdb4b1cc0f04d9ce3620e7
         template-haskell-2.8.0.0-a3012803fde1dc362e555b35a1a78e6d
         text-0.11.2.3-20bbe8fabd6e57647019c7050504c715
         transformers-0.3.0.0-ff2bb6ac67241ebb987351a3db564af0
         transformers-compat-0.1.1.1-dcef4e1eeab8de73981ca7a7147f19d8
         unordered-containers-0.2.3.1-7ba6dfc1c8779b515a2b737c2e15221f
         vector-0.10.0.1-869166d5d49db46ce6c328ea5f8defbf
         void-0.6.1-a5dd4414ba60b3eb907d944420bc2637
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/kcarter/scrap/haskell/snap-test/cabal-dev//share/doc/lens-3.9.1/html/lens.haddock
haddock-html: /home/kcarter/scrap/haskell/snap-test/cabal-dev//share/doc/lens-3.9.1/html
